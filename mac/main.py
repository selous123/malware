from malware_model import malwareModel as model
from malware_model import accuracy
from load_malware import load_malware 
import sys
import argparse
import tensorflow as tf
import math

FLAGS = None
image_height,image_width=128,128
PIXEL_NUM = image_height*image_width
NUM_CLASSES = 2
def train():

    ##prepare data
    input_data = load_malware(FLAGS.input_data_dir)

    #build the graph
    images_pl = tf.placeholder(tf.float32,shape=[FLAGS.batch_size,PIXEL_NUM],name="images")
    labels_pl = tf.placeholder(tf.float32,shape=[FLAGS.batch_size,1],name="labels")

    m = model(images_pl,labels_pl,FLAGS.learning_rate,image_height,image_width,NUM_CLASSES)
    loss,optimize= m.optimize
    #prediction = m.prediction
    logits = m._logits
    summary_op = tf.summary.merge_all()
    init = tf.global_variables_initializer()
    ##build session
    session = tf.Session()
    session.run(init)
    summary_writer = tf.summary.FileWriter(FLAGS.log_dir,session.graph);
    
    ##run training data 
    for ind in range(FLAGS.max_step):
        images,labels = input_data.train.next_batch(FLAGS.batch_size)
        _,loss_curr,logits_curr= session.run([optimize,loss,logits],feed_dict={
            images_pl:images,
            labels_pl:labels
        })
        
        #tensorboard
        if ind%100==0:
            summary_str = session.run(summary_op, feed_dict={
                images_pl:images,
                labels_pl:labels
                })
            summary_writer.add_summary(summary_str, ind)
            summary_writer.flush()
        if ind%100==0:
            acc_curr = accuracy(labels,logits_curr)
            print "step:{},prediction accuracy:{},loss:{}".format(ind,acc_curr,loss_curr)
    
    
    #compute accuracy of test data.
    num_steps = int(math.ceil(input_data.test.num_examples / FLAGS.batch_size))
    acc = []
    for ind in range(num_steps):
        images,labels = input_data.test.next_batch(FLAGS.batch_size)
        acc_curr = session.run([accuracy],feed_dict={
                images_pl:images,
                labels_pl:labels})
        acc.append(acc_curr)
    print "test accrracy is {},the mean accuracy is {}".format(acc,sum(acc)/len(acc))
    
    
    
def main(_):
    if tf.gfile.Exists(FLAGS.log_dir):
        tf.gfile.DeleteRecursively(FLAGS.log_dir);
    tf.gfile.MakeDirs(FLAGS.log_dir);
    train();


if __name__=="__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--batch_size",
        type=int,
        default=128,
        help="size of batch"
        )
    parser.add_argument(
        "--input_data_dir",
        type=list,
        default=["/home/lrh/dataset/malware/malware_img/pua/","/home/lrh/dataset/malware/malware_img/normal/"],
        help="directory of input data")
    parser.add_argument(
        "--log_dir",
        type=str,
        default="/tmp/tensorflow/malware/logs",
        help="directory of log dir"
        )
    parser.add_argument(
        "--max_step",
        type=int,
        default=5000,
        help="max step"
        )
    parser.add_argument(
        "--learning_rate",
        type = float,
        default=0.0001,
        help="learning rate"
        )

    FLAGS,unparse = parser.parse_known_args();
    #hello world
    tf.app.run(main=main,argv=[sys.argv[0]]+unparse);
